name: üöÄ Deploy to VPS

on:
  push:
    branches:
      - prod
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  APP_NAME: Promosletter
  DEPLOY_PATH: /var/www/vhosts/promosletter.com/httpdocs

jobs:
  # =============================================================================
  # D√©ploiement sur VPS
  # =============================================================================
  deploy:
    name: üöÄ Deploy to VPS
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, ctype, fileinfo, openssl, PDO, tokenizer, xml, gd, pdo_mysql, bcmath, redis, zip, intl, sodium

      - name: üì¶ Install Composer dependencies
        run: composer install --no-dev --prefer-dist --optimize-autoloader --no-interaction

      - name: üé® Install and build assets
        run: |
          npm ci --silent
          npm run build --silent
          npm prune --production --silent

      - name: üìÅ Create deployment archive
        run: |
          mkdir -p deployment
          rsync -av --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='tests' \
            --exclude='.env' \
            --exclude='.env.prod' \
            --exclude='.env.testing' \
            --exclude='deployment' \
            --exclude='*.log' \
            ./ deployment/
          tar -czf deployment.tar.gz deployment/

      # =============================================================================
      # Upload des fichiers sur le VPS
      # =============================================================================
      - name: üì§ Upload deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/tmp/"
          timeout: 300s

      # =============================================================================
      # Ex√©cution compl√®te du d√©ploiement
      # =============================================================================
      - name: üöÄ Execute complete deployment
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 900s
          script: |
            set -e

            # Variables de d√©ploiement
            export APP_DIR="${{ env.DEPLOY_PATH }}"
            export BACKUP_DIR="/var/www/backups"
            export TIMESTAMP=$(date +%Y%m%d_%H%M%S)

            # Couleurs pour les logs
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            RED='\033[0;31m'
            NC='\033[0m'

            log() { echo -e "${GREEN}[INFO]${NC} $1"; }
            warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
            error() { echo -e "${RED}[ERROR]${NC} $1"; }

            log "üöÄ Starting direct deployment of ${{ env.APP_NAME }}..."
            log "üìç Deploy path: $APP_DIR"

            # =============================================================================
            # Sauvegarde AVANT de toucher aux fichiers
            # =============================================================================
            if [ -d "$APP_DIR" ]; then
              log "üíæ Creating backup of current version..."
              sudo mkdir -p "$BACKUP_DIR"
              sudo cp -r "$APP_DIR" "$BACKUP_DIR/backup_$TIMESTAMP"
              log "‚úÖ Backup saved to: $BACKUP_DIR/backup_$TIMESTAMP"
            fi

            # =============================================================================
            # Arr√™t temporaire des services pour √©viter les conflits
            # =============================================================================
            log "‚è∏Ô∏è  Temporarily stopping services..."
            if command -v supervisorctl >/dev/null 2>&1; then
              sudo supervisorctl stop ${{ env.APP_NAME }}-worker:* 2>/dev/null || true
              sudo supervisorctl stop ${{ env.APP_NAME }}-reverb 2>/dev/null || true
            fi

            # =============================================================================
            # Extraction et remplacement des fichiers
            # =============================================================================
            log "üì¶ Extracting new version..."
            if [ ! -f "/tmp/deployment.tar.gz" ]; then
              error "‚ùå Deployment archive not found!"
              exit 1
            fi

            # Cr√©er le r√©pertoire s'il n'existe pas
            sudo mkdir -p "$APP_DIR"

            # Sauvegarder les fichiers critiques AVANT l'extraction
            if [ -f "$APP_DIR/.env" ]; then
              cp "$APP_DIR/.env" "/tmp/.env.backup"
              log "‚úÖ Environment file backed up"
            fi

            if [ -d "$APP_DIR/storage" ]; then
              cp -r "$APP_DIR/storage" "/tmp/storage.backup"
              log "‚úÖ Storage directory backed up"
            fi

            # Extraire la nouvelle version DIRECTEMENT dans APP_DIR
            tar -xzf /tmp/deployment.tar.gz -C /tmp/
            sudo rsync -av --delete \
              --exclude='.env' \
              --exclude='storage/app' \
              --exclude='storage/logs' \
              /tmp/deployment/ "$APP_DIR/"

            rm -rf /tmp/deployment*

            # =============================================================================
            # Restaurer les fichiers persistants
            # =============================================================================
            log "üìã Restoring persistent files..."

            # Restaurer .env
            if [ -f "/tmp/.env.backup" ]; then
              cp "/tmp/.env.backup" "$APP_DIR/.env"
              rm "/tmp/.env.backup"
              log "‚úÖ Environment file restored"
            else
              cp "$APP_DIR/.env.prod" "$APP_DIR/.env"
              cd "$APP_DIR"
              php -r "echo 'APP_KEY=base64:' . base64_encode(random_bytes(32)) . PHP_EOL;" >> .env
              warn "‚ö†Ô∏è New .env created with generated APP_KEY"
            fi

            # Restaurer storage
            if [ -d "/tmp/storage.backup" ]; then
              # Fusionner les dossiers storage
              sudo cp -r /tmp/storage.backup/app "$APP_DIR/storage/" 2>/dev/null || true
              sudo cp -r /tmp/storage.backup/logs "$APP_DIR/storage/" 2>/dev/null || true
              sudo rm -rf /tmp/storage.backup
              log "‚úÖ Storage files restored"
            fi

            # =============================================================================
            # Configuration de l'application (DANS APP_DIR)
            # =============================================================================
            cd "$APP_DIR"
            log "üîß Configuring Laravel application..."

            # Cr√©er les r√©pertoires manquants
            sudo mkdir -p storage/framework/{cache,sessions,views}
            sudo mkdir -p storage/logs
            sudo mkdir -p storage/app/public
            sudo mkdir -p bootstrap/cache

            # Permissions
            sudo chown -R www-data:www-data storage bootstrap/cache
            sudo chmod -R 775 storage bootstrap/cache

            # Optimisations Laravel
            log "‚ö° Running Laravel optimizations..."
            sudo -u www-data php artisan config:clear --no-interaction
            sudo -u www-data php artisan route:clear --no-interaction
            sudo -u www-data php artisan view:clear --no-interaction
            sudo -u www-data php artisan cache:clear --no-interaction

            # Migrations
            if [ "${{ github.event.inputs.environment || 'production' }}" = "production" ]; then
              log "üóÉÔ∏è Running database migrations..."
              sudo -u www-data php artisan migrate:fresh --no-interaction
            fi

            # Optimisations de production
            log "üöÄ Applying production optimizations..."
            sudo -u www-data php artisan config:cache --no-interaction
            sudo -u www-data php artisan route:cache --no-interaction
            sudo -u www-data php artisan view:cache --no-interaction
            sudo -u www-data php artisan event:cache --no-interaction
            sudo -u www-data php artisan storage:link --no-interaction || true

            # =============================================================================
            # Red√©marrage des services web
            # =============================================================================
            log "üîÑ Reloading web services..."
            if sudo systemctl is-active --quiet php8.3-fpm; then
              sudo systemctl reload php8.3-fpm
            elif sudo systemctl is-active --quiet php8.2-fpm; then
              sudo systemctl reload php8.2-fpm
            fi

            if sudo systemctl is-active --quiet nginx; then
              sudo nginx -t && sudo systemctl reload nginx
            fi

            # =============================================================================
            # Configuration et red√©marrage des services Laravel
            # =============================================================================
            log "üì® Configuring and restarting Laravel services..."

            # Configuration Supervisor (avec les bons chemins)
            sudo tee /etc/supervisor/conf.d/${{ env.APP_NAME }}-worker.conf > /dev/null << SUPERVISOR_CONF
            [program:${{ env.APP_NAME }}-worker]
            process_name=%(program_name)s_%(process_num)02d
            command=php $APP_DIR/artisan queue:work --sleep=3 --tries=3 --max-time=3600 --memory=512
            directory=$APP_DIR
            user=www-data
            autostart=true
            autorestart=true
            stopasgroup=true
            killasgroup=true
            numprocs=2
            redirect_stderr=true
            stdout_logfile=$APP_DIR/storage/logs/worker.log
            stdout_logfile_maxbytes=50MB
            stdout_logfile_backups=3
            stopwaitsecs=3600
            SUPERVISOR_CONF

            sudo tee /etc/supervisor/conf.d/${{ env.APP_NAME }}-reverb.conf > /dev/null << REVERB_CONF
            [program:${{ env.APP_NAME }}-reverb]
            process_name=%(program_name)s
            command=php $APP_DIR/artisan reverb:start --host=0.0.0.0 --port=8080
            directory=$APP_DIR
            user=www-data
            autostart=true
            autorestart=true
            stopasgroup=true
            killasgroup=true
            redirect_stderr=true
            stdout_logfile=$APP_DIR/storage/logs/reverb.log
            stdout_logfile_maxbytes=50MB
            stdout_logfile_backups=3
            stderr_logfile=$APP_DIR/storage/logs/reverb_error.log
            stderr_logfile_maxbytes=50MB
            stderr_logfile_backups=3
            REVERB_CONF

            # Red√©marrer Supervisor
            if command -v supervisorctl >/dev/null 2>&1; then
              sudo supervisorctl reread
              sudo supervisorctl update
              sudo supervisorctl start ${{ env.APP_NAME }}-worker:*
              sudo supervisorctl start ${{ env.APP_NAME }}-reverb
              
              sleep 3
              log "üìä Services status:"
              sudo supervisorctl status ${{ env.APP_NAME }}-worker:* ${{ env.APP_NAME }}-reverb
            fi

            # Red√©marrer les services Laravel
            sudo -u www-data php artisan queue:restart --no-interaction || true
            sudo -u www-data php artisan reverb:restart --no-interaction || true

            # =============================================================================
            # Nettoyage et tests
            # =============================================================================
            log "üßπ Cleaning up old backups..."
            if [ -d "$BACKUP_DIR" ]; then
              ls -dt "$BACKUP_DIR/backup_"* 2>/dev/null | tail -n +6 | xargs sudo rm -rf 2>/dev/null || true
            fi

            log "üß™ Testing deployment..."
            if sudo -u www-data php artisan --version >/dev/null 2>&1; then
              log "‚úÖ Laravel application is working"
            else
              error "‚ùå Laravel application test failed"
              exit 1
            fi

            # =============================================================================
            # Rapport final
            # =============================================================================
            log "üéâ Direct deployment completed successfully!"
            log "üìç Application path: $APP_DIR"
            log "üåê Application available at: ${{ secrets.APP_URL || 'your-domain.com' }}"
            log "üíæ Backup saved to: $BACKUP_DIR/backup_$TIMESTAMP"
      # =============================================================================
      # Tests post-d√©ploiement
      # =============================================================================
      - name: üß™ Post-deployment health checks
        run: |
          echo "üè• Running health checks..."

          # Test HTTP (si URL configur√©e)
          if [ -n "${{ secrets.APP_URL }}" ]; then
            echo "Testing HTTP endpoint..."
            if curl -f -s --max-time 30 "${{ secrets.APP_URL }}/health" >/dev/null 2>&1; then
              echo "‚úÖ HTTP health check passed"
            else
              echo "‚ö†Ô∏è HTTP health check failed - application may still be starting"
            fi
          fi

          # Test WebSocket Reverb (si possible)
          if [ -n "${{ secrets.VPS_HOST }}" ]; then
            echo "Testing WebSocket endpoint..."
            if nc -z ${{ secrets.VPS_HOST }} 8080; then
              echo "‚úÖ WebSocket port 8080 is open"
            else
              echo "‚ö†Ô∏è WebSocket port 8080 not accessible"
            fi
          fi

          echo "‚úÖ Health checks completed"

      # =============================================================================
      # Notification finale
      # =============================================================================
      - name: üì¢ Deployment notification
        if: always()
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application:** ${{ env.APP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- üåê Laravel Application" >> $GITHUB_STEP_SUMMARY
          echo "- üì® Queue Workers (2 processes)" >> $GITHUB_STEP_SUMMARY
          echo "- üì° Reverb WebSocket Server" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "üéâ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ secrets.APP_URL }}" ]; then
              echo "üîó [Visit Application](${{ secrets.APP_URL }})" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå **Deployment failed!**" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: üßπ Cleanup local files
        if: always()
        run: |
          rm -f deployment.tar.gz
          rm -rf deployment/

  # =============================================================================
  # Rollback automatique en cas d'√©chec
  # =============================================================================
  rollback:
    name: üîÑ Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && needs.deploy.result == 'failure'

    steps:
      - name: üîÑ Execute automatic rollback
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            echo "üîÑ Starting automatic rollback process..."

            BACKUP_DIR="/var/www/backups"
            APP_DIR="${{ env.DEPLOY_PATH }}"

            # Trouver le backup le plus r√©cent
            LATEST_BACKUP=$(ls -dt "$BACKUP_DIR"/backup_* 2>/dev/null | head -n 1)

            if [ -n "$LATEST_BACKUP" ]; then
              echo "üì¶ Rolling back to: $LATEST_BACKUP"
              sudo rm -f "$APP_DIR"
              sudo ln -sf "$LATEST_BACKUP" "$APP_DIR"
              
              # Red√©marrer les services
              echo "üîÑ Restarting services..."
              sudo systemctl reload php8.3-fpm nginx 2>/dev/null || sudo systemctl reload php-fpm nginx
              
              # Red√©marrer Supervisor
              if command -v supervisorctl >/dev/null 2>&1; then
                sudo supervisorctl restart ${{ env.APP_NAME }}-worker:*
                sudo supervisorctl restart ${{ env.APP_NAME }}-reverb
              fi
              
              echo "‚úÖ Rollback completed successfully"
              echo "üåê Application restored to previous version"
            else
              echo "‚ùå No backup found for rollback"
              exit 1
            fi

      - name: üì¢ Rollback notification
        run: |
          echo "## üîÑ Automatic Rollback Executed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Due to deployment failure, the application has been automatically rolled back to the previous version." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action required:** Please check the deployment logs and fix the issues before attempting another deployment." >> $GITHUB_STEP_SUMMARY
