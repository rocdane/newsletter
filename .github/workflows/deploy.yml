name: 🚀 Deploy to VPS

on:
  push:
    branches:
      - prod
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  APP_NAME: Promosletter
  DEPLOY_PATH: /var/www/vhosts/promosletter.com/httpdocs

jobs:
  # =============================================================================
  # Déploiement sur VPS
  # =============================================================================
  deploy:
    name: 🚀 Deploy to VPS
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: 🔥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, ctype, fileinfo, openssl, PDO, tokenizer, xml, gd, pdo_mysql, bcmath, redis, zip, intl, sodium

      - name: 📦 Install Composer dependencies
        run: composer install --no-dev --prefer-dist --optimize-autoloader --no-interaction

      - name: 🎨 Install and build assets
        run: |
          npm ci --silent
          npm run build --silent
          npm prune --production --silent

      - name: 📁 Create deployment archive
        run: |
          mkdir -p deployment
          rsync -av --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='tests' \
            --exclude='.env' \
            --exclude='.env.prod' \
            --exclude='.env.testing' \
            --exclude='deployment' \
            --exclude='*.log' \
            ./ deployment/
          tar -czf deployment.tar.gz deployment/

      # =============================================================================
      # Upload des fichiers sur le VPS
      # =============================================================================
      - name: 📤 Upload deployment files and scripts
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "deployment.tar.gz,.github/scripts/deploy.sh"
          target: "/tmp/"
          timeout: 300s

      # =============================================================================
      # Exécution complète du déploiement
      # =============================================================================
      - name: 🚀 Execute complete deployment
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 900s
          script: |
            # Rendre le script exécutable et l'exécuter
            chmod +x /tmp/.github/scripts/deploy.sh

            # Exporter les variables d'environnement pour le script
            export APP_NAME="${{ env.APP_NAME }}"
            export DEPLOY_PATH="${{ env.DEPLOY_PATH }}"
            export ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
            export APP_URL="${{ secrets.APP_URL }}"

            # Exécuter le script de déploiement
            /tmp/.github/scripts/deploy.sh

            # Nettoyer le script après exécution
            rm -f /tmp/.github/scripts/deploy.sh
            rm -rf /tmp/.github

      # =============================================================================
      # Tests post-déploiement
      # =============================================================================
      - name: 🧪 Post-deployment health checks
        run: |
          echo "🏥 Running health checks..."

          # Test HTTP (si URL configurée)
          if [ -n "${{ secrets.APP_URL }}" ]; then
            echo "Testing HTTP endpoint..."
            if curl -f -s --max-time 30 "${{ secrets.APP_URL }}/health" >/dev/null 2>&1; then
              echo "✅ HTTP health check passed"
            else
              echo "⚠️ HTTP health check failed - application may still be starting"
            fi
          fi

          # Test WebSocket Reverb (si possible)
          if [ -n "${{ secrets.VPS_HOST }}" ]; then
            echo "Testing WebSocket endpoint..."
            if nc -z ${{ secrets.VPS_HOST }} 8080; then
              echo "✅ WebSocket port 8080 is open"
            else
              echo "⚠️ WebSocket port 8080 not accessible"
            fi
          fi

          echo "✅ Health checks completed"

      # =============================================================================
      # Notification finale
      # =============================================================================
      - name: 📢 Deployment notification
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application:** ${{ env.APP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- 🌍 Laravel Application" >> $GITHUB_STEP_SUMMARY
          echo "- 🔨 Queue Workers (2 processes)" >> $GITHUB_STEP_SUMMARY
          echo "- 📡 Reverb WebSocket Server" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "🎉 **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ secrets.APP_URL }}" ]; then
              echo "🔗 [Visit Application](${{ secrets.APP_URL }})" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Deployment failed!**" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🧹 Cleanup local files
        if: always()
        run: |
          rm -f deployment.tar.gz
          rm -rf deployment/

  # =============================================================================
  # Rollback automatique en cas d'échec
  # =============================================================================
  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && needs.deploy.result == 'failure'

    steps:
      - name: 🔄 Execute automatic rollback
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            echo "🔄 Starting automatic rollback process..."

            BACKUP_DIR="/var/www/backups"
            APP_DIR="${{ env.DEPLOY_PATH }}"

            # Trouver le backup le plus récent
            LATEST_BACKUP=$(ls -dt "$BACKUP_DIR"/backup_* 2>/dev/null | head -n 1)

            if [ -n "$LATEST_BACKUP" ]; then
              echo "📦 Rolling back to: $LATEST_BACKUP"
              sudo rm -f "$APP_DIR"
              sudo ln -sf "$LATEST_BACKUP" "$APP_DIR"
              
              # Redémarrer les services
              echo "🔄 Restarting services..."
              sudo systemctl reload php8.3-fpm nginx 2>/dev/null || sudo systemctl reload php-fpm nginx
              
              # Redémarrer Supervisor
              if command -v supervisorctl >/dev/null 2>&1; then
                sudo supervisorctl restart ${{ env.APP_NAME }}-worker:*
                sudo supervisorctl restart ${{ env.APP_NAME }}-reverb
              fi
              
              echo "✅ Rollback completed successfully"
              echo "🌍 Application restored to previous version"
            else
              echo "❌ No backup found for rollback"
              exit 1
            fi

      - name: 📢 Rollback notification
        run: |
          echo "## 🔄 Automatic Rollback Executed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Due to deployment failure, the application has been automatically rolled back to the previous version." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action required:** Please check the deployment logs and fix the issues before attempting another deployment." >> $GITHUB_STEP_SUMMARY
