name: üöÄ Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: "Skip tests"
        required: false
        default: false
        type: boolean

env:
  APP_NAME: Promosletter
  DEPLOY_PATH: /var/www/vhosts/promosletter.com/httpdocs

jobs:
  # =============================================================================
  # Tests pr√©-d√©ploiement
  # =============================================================================
  pre-deploy-tests:
    name: üß™ Pre-deployment Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, ctype, fileinfo, openssl, PDO, tokenizer, xml, gd, pdo_mysql, bcmath, redis, zip, intl, sodium

      - name: üì¶ Install dependencies
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction
          npm ci --only=production

      - name: üîß Prepare environment
        run: |
          cp .env.example .env.testing
          php artisan key:generate --env=testing
          mkdir -p storage/framework/{cache,sessions,views}
          chmod -R 777 storage bootstrap/cache

      - name: üß™ Run tests
        run: php artisan test --env=testing

  # =============================================================================
  # D√©ploiement sur VPS
  # =============================================================================
  deploy:
    name: üöÄ Deploy to VPS
    runs-on: ubuntu-latest
    needs: [pre-deploy-tests]
    if: always() && (needs.pre-deploy-tests.result == 'success' || needs.pre-deploy-tests.result == 'skipped')

    environment:
      name: ${{ inputs.environment || 'production' }}
      url: ${{ secrets.APP_URL }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, ctype, fileinfo, openssl, PDO, tokenizer, xml, gd, pdo_mysql, bcmath, redis, zip, intl, sodium

      - name: üì¶ Install Composer dependencies
        run: composer install --no-dev --prefer-dist --optimize-autoloader --no-interaction

      - name: üé® Install and build assets
        run: |
          npm ci --only=production --silent
          npm run build --silent

      - name: üìÅ Create deployment archive
        run: |
          # Cr√©er le dossier de d√©ploiement
          mkdir -p deployment

          # Copier les fichiers en excluant les non n√©cessaires
          rsync -av --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='tests' \
            --exclude='.env' \
            --exclude='.env.*' \
            --exclude='deployment' \
            --exclude='*.log' \
            ./ deployment/

          # Cr√©er l'archive
          tar -czf deployment.tar.gz deployment/

          # Cr√©er le script de d√©ploiement
          cat > deploy-script.sh << 'EOF'
          #!/bin/bash
          set -e

          # Variables
          APP_DIR="${{ env.DEPLOY_PATH }}"
          BACKUP_DIR="/var/www/backups"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          NEW_DIR="${APP_DIR}_${TIMESTAMP}"

          # Couleurs
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          RED='\033[0;31m'
          NC='\033[0m'

          log() { echo -e "${GREEN}[INFO]${NC} $1"; }
          warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
          error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }

          log "üöÄ Starting deployment..."

          # Cr√©er les r√©pertoires
          sudo mkdir -p "$NEW_DIR" "$BACKUP_DIR"
          sudo chown -R $(whoami):www-data "$NEW_DIR"
          sudo chmod -R 755 "$NEW_DIR"

          # Extraire l'archive
          log "üì¶ Extracting deployment archive..."
          tar -xzf /tmp/deployment.tar.gz -C /tmp/
          sudo cp -r /tmp/deployment/* "$NEW_DIR/"
          rm -rf /tmp/deployment*

          # Backup de l'ancienne version si elle existe
          if [ -L "$APP_DIR" ] && [ -e "$APP_DIR" ]; then
            OLD_TARGET=$(readlink "$APP_DIR")
            log "üíæ Backing up current version: $OLD_TARGET"
            sudo cp -r "$OLD_TARGET" "$BACKUP_DIR/backup_$TIMESTAMP"
          fi

          # Copier les fichiers persistants
          if [ -L "$APP_DIR" ] && [ -e "$APP_DIR" ]; then
            log "üìã Copying persistent files..."
            
            # Copier .env
            if [ -f "$APP_DIR/.env" ]; then
              sudo cp "$APP_DIR/.env" "$NEW_DIR/.env"
              log "‚úÖ Environment file copied"
            fi
            
            # Copier le storage
            if [ -d "$APP_DIR/storage" ]; then
              sudo cp -r "$APP_DIR/storage/app" "$NEW_DIR/storage/" 2>/dev/null || true
              sudo cp -r "$APP_DIR/storage/logs" "$NEW_DIR/storage/" 2>/dev/null || true
              log "‚úÖ Storage files copied"
            fi
          else
            warn "‚ö†Ô∏è  First deployment - manual configuration required"
            # Cr√©er un .env par d√©faut
            sudo cp "$NEW_DIR/.env.example" "$NEW_DIR/.env"
            sudo php -r "echo 'APP_KEY=base64:' . base64_encode(random_bytes(32)) . PHP_EOL;" >> "$NEW_DIR/.env"
          fi

          # Aller dans le nouveau r√©pertoire
          cd "$NEW_DIR"

          # Permissions et optimisations
          log "üîß Setting up application..."
          sudo mkdir -p storage/framework/{cache,sessions,views}
          sudo mkdir -p storage/logs
          sudo chown -R www-data:www-data storage bootstrap/cache
          sudo chmod -R 775 storage bootstrap/cache

          # Optimisations Laravel
          log "‚ö° Optimizing Laravel..."
          sudo -u www-data php artisan config:clear --no-interaction
          sudo -u www-data php artisan route:clear --no-interaction
          sudo -u www-data php artisan view:clear --no-interaction
          sudo -u www-data php artisan cache:clear --no-interaction

          # Migrations (avec confirmation en production)
          if [ "${{ inputs.environment || 'production' }}" = "production" ]; then
            log "üóÉÔ∏è  Running database migrations..."
            sudo -u www-data php artisan migrate --force --no-interaction
          fi

          # Optimisations de production
          sudo -u www-data php artisan config:cache --no-interaction
          sudo -u www-data php artisan route:cache --no-interaction
          sudo -u www-data php artisan view:cache --no-interaction
          sudo -u www-data php artisan event:cache --no-interaction

          # Lien symbolique storage
          sudo -u www-data php artisan storage:link --no-interaction || true

          # Mise √† jour du symlink principal
          log "üîó Updating application symlink..."
          sudo rm -f "$APP_DIR"
          sudo ln -sf "$NEW_DIR" "$APP_DIR"

          # Red√©marrage des services
          log "üîÑ Restarting services..."

          # PHP-FPM
          sudo systemctl reload php8.3-fpm 2>/dev/null || true

          # Nginx
          sudo systemctl reload nginx 2>/dev/null || true

          # Supervisor (pour les queues et Reverb)
          sudo supervisorctl reread 2>/dev/null || true
          sudo supervisorctl update 2>/dev/null || true
          sudo supervisorctl restart laravel-worker:* 2>/dev/null || true
          sudo supervisorctl restart laravel-reverb 2>/dev/null || true

          # Queue restart
          sudo -u www-data php artisan queue:restart --no-interaction 2>/dev/null || true

          # Reverb restart (si configur√©)
          sudo -u www-data php artisan reverb:restart --no-interaction 2>/dev/null || true

          # Nettoyage des anciens d√©ploiements (garder les 5 derniers)
          log "üßπ Cleaning up old deployments..."
          ls -dt "${APP_DIR}_"* 2>/dev/null | tail -n +6 | xargs sudo rm -rf 2>/dev/null || true
          ls -dt "$BACKUP_DIR/backup_"* 2>/dev/null | tail -n +6 | xargs sudo rm -rf 2>/dev/null || true

          # Test final
          log "üß™ Testing deployment..."
          if sudo -u www-data php artisan --version >/dev/null 2>&1; then
            log "‚úÖ Deployment successful!"
            log "üìç Application path: $APP_DIR -> $NEW_DIR"
            log "üåê Application should be available at: ${{ secrets.APP_URL }}"
          else
            error "‚ùå Deployment test failed!"
          fi
          EOF

          chmod +x deploy-script.sh

      # =============================================================================
      # D√©ploiement avec cl√© SSH
      # =============================================================================
      - name: üì§ Deploy with SSH Key
        if: ${{ secrets.VPS_PRIVATE_KEY }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "deployment.tar.gz,deploy-script.sh"
          target: "/tmp/"
          timeout: 300s

      - name: üöÄ Execute deployment (SSH Key)
        if: ${{ secrets.VPS_PRIVATE_KEY }}
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            chmod +x /tmp/deploy-script.sh
            /tmp/deploy-script.sh
          timeout: 600s

      # =============================================================================
      # D√©ploiement avec mot de passe (fallback)
      # =============================================================================
      - name: üì§ Deploy with Password
        if: ${{ !secrets.VPS_PRIVATE_KEY && secrets.VPS_PASSWORD }}
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp \
            -o StrictHostKeyChecking=no \
            -P ${{ secrets.VPS_PORT || 22 }} \
            deployment.tar.gz deploy-script.sh \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

      - name: üöÄ Execute deployment (Password)
        if: ${{ !secrets.VPS_PRIVATE_KEY && secrets.VPS_PASSWORD }}
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh \
            -o StrictHostKeyChecking=no \
            -p ${{ secrets.VPS_PORT || 22 }} \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'chmod +x /tmp/deploy-script.sh && /tmp/deploy-script.sh'

      # =============================================================================
      # Tests post-d√©ploiement
      # =============================================================================
      - name: üß™ Post-deployment health checks
        run: |
          echo "üè• Running health checks..."

          # Test HTTP
          if [ -n "${{ secrets.APP_URL }}" ]; then
            echo "Testing HTTP endpoint..."
            curl -f -s --max-time 30 "${{ secrets.APP_URL }}/health" || echo "‚ö†Ô∏è HTTP health check failed"
          fi

          echo "‚úÖ Health checks completed"

      # =============================================================================
      # Notification de d√©ploiement
      # =============================================================================
      - name: üì¢ Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "üéâ Deployment to ${{ inputs.environment || 'production' }} completed successfully!"
          else
            echo "‚ùå Deployment to ${{ inputs.environment || 'production' }} failed!"
          fi

      - name: üßπ Cleanup local files
        if: always()
        run: |
          rm -f deployment.tar.gz deploy-script.sh
          rm -rf deployment/

  # =============================================================================
  # Rollback en cas d'√©chec (optionnel)
  # =============================================================================
  rollback:
    name: üîÑ Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && needs.deploy.result == 'failure'

    steps:
      - name: üîÑ Execute rollback
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            echo "üîÑ Starting rollback process..."

            BACKUP_DIR="/var/www/backups"
            APP_DIR="${{ env.DEPLOY_PATH }}"

            # Trouver le backup le plus r√©cent
            LATEST_BACKUP=$(ls -dt "$BACKUP_DIR"/backup_* 2>/dev/null | head -n 1)

            if [ -n "$LATEST_BACKUP" ]; then
              echo "üì¶ Rolling back to: $LATEST_BACKUP"
              sudo rm -f "$APP_DIR"
              sudo ln -sf "$LATEST_BACKUP" "$APP_DIR"
              
              # Red√©marrer les services
              sudo systemctl reload php8.3-fpm nginx
              sudo supervisorctl restart all
              
              echo "‚úÖ Rollback completed"
            else
              echo "‚ùå No backup found for rollback"
              exit 1
            fi
