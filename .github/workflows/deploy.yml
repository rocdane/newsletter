name: üöÄ Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: "Skip tests"
        required: false
        default: false
        type: boolean

env:
  APP_NAME: Promosletter
  DEPLOY_PATH: /var/www/vhosts/promosletter.com/httpdocs

jobs:
  # =============================================================================
  # Tests pr√©-d√©ploiement
  # =============================================================================
  pre-deploy-tests:
    name: üß™ Pre-deployment Tests
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip_tests }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries=5

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, ctype, fileinfo, openssl, PDO, tokenizer, xml, gd, pdo_mysql, bcmath, redis, zip, intl, sodium

      - name: üì¶ Install dependencies
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction
          npm ci --only=production

      - name: üîß Prepare environment
        run: |
          cp .env.example .env.testing
          php artisan key:generate --env=testing
          mkdir -p storage/framework/{cache,sessions,views}
          chmod -R 777 storage bootstrap/cache

      - name: üß™ Run tests
        run: php artisan test --env=testing

  # =============================================================================
  # D√©ploiement sur VPS
  # =============================================================================
  deploy:
    name: üöÄ Deploy to VPS
    runs-on: ubuntu-latest
    needs: [pre-deploy-tests]
    if: always() && (needs.pre-deploy-tests.result == 'success' || needs.pre-deploy-tests.result == 'skipped')

    environment:
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, ctype, fileinfo, openssl, PDO, tokenizer, xml, gd, pdo_mysql, bcmath, redis, zip, intl, sodium

      - name: üì¶ Install Composer dependencies
        run: composer install --no-dev --prefer-dist --optimize-autoloader --no-interaction

      - name: üé® Install and build assets
        run: |
          npm ci --only=production --silent
          npm run build --silent

      - name: üìÅ Create deployment archive
        run: |
          mkdir -p deployment
          rsync -av --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='tests' \
            --exclude='.env' \
            --exclude='.env.example' \
            --exclude='.env.testing' \
            --exclude='deployment' \
            --exclude='*.log' \
            ./ deployment/
          tar -czf deployment.tar.gz deployment/
          cat > deploy-script.sh << 'EOF'
          #!/bin/bash
          set -e
          APP_DIR="$DEPLOY_PATH"
          BACKUP_DIR="/var/www/backups"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          NEW_DIR="${APP_DIR}_${TIMESTAMP}"
          # ... (le reste du script reste inchang√©)
          EOF
          chmod +x deploy-script.sh

      # =============================================================================
      # D√©ploiement avec cl√© SSH
      # =============================================================================
      - name: üì§ Deploy with SSH Key
        if: ${{ secrets.VPS_PRIVATE_KEY != '' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "deployment.tar.gz,deploy-script.sh"
          target: "/tmp/"
          timeout: 300s

      - name: üöÄ Execute deployment (SSH Key)
        if: ${{ secrets.VPS_PRIVATE_KEY != '' }}
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            export DEPLOY_PATH="${{ env.DEPLOY_PATH }}"
            chmod +x /tmp/deploy-script.sh
            /tmp/deploy-script.sh
          timeout: 600s

      # =============================================================================
      # D√©ploiement avec mot de passe (fallback)
      # =============================================================================
      - name: üì§ Deploy with Password
        if: ${{ secrets.VPS_PRIVATE_KEY == '' && secrets.VPS_PASSWORD != '' }}
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp \
            -o StrictHostKeyChecking=no \
            -P ${{ secrets.VPS_PORT || 22 }} \
            deployment.tar.gz deploy-script.sh \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

      - name: üöÄ Execute deployment (Password)
        if: ${{ secrets.VPS_PRIVATE_KEY == '' && secrets.VPS_PASSWORD != '' }}
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh \
            -o StrictHostKeyChecking=no \
            -p ${{ secrets.VPS_PORT || 22 }} \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'export DEPLOY_PATH='${{ env.DEPLOY_PATH }}' && chmod +x /tmp/deploy-script.sh && /tmp/deploy-script.sh'

      # =============================================================================
      # Tests post-d√©ploiement
      # =============================================================================
      - name: üß™ Post-deployment health checks
        run: |
          echo "üè• Running health checks..."
          if [ -n "${{ secrets.APP_URL }}" ]; then
            echo "Testing HTTP endpoint..."
            curl -f -s --max-time 30 "${{ secrets.APP_URL }}/health" || echo "‚ö†Ô∏è HTTP health check failed"
          fi
          echo "‚úÖ Health checks completed"

      - name: üì¢ Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "üéâ Deployment to ${{ github.event.inputs.environment || 'production' }} completed successfully!"
          else
            echo "‚ùå Deployment to ${{ github.event.inputs.environment || 'production' }} failed!"
          fi

      - name: üßπ Cleanup local files
        if: always()
        run: |
          rm -f deployment.tar.gz deploy-script.sh
          rm -rf deployment/

  # =============================================================================
  # Rollback en cas d'√©chec (optionnel)
  # =============================================================================
  rollback:
    name: üîÑ Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && needs.deploy.result == 'failure'

    steps:
      - name: üîÑ Execute rollback
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            echo "üîÑ Starting rollback process..."
            BACKUP_DIR="/var/www/backups"
            APP_DIR="${{ env.DEPLOY_PATH }}"
            LATEST_BACKUP=$(ls -dt "$BACKUP_DIR"/backup_* 2>/dev/null | head -n 1)
            if [ -n "$LATEST_BACKUP" ]; then
              echo "üì¶ Rolling back to: $LATEST_BACKUP"
              sudo rm -f "$APP_DIR"
              sudo ln -sf "$LATEST_BACKUP" "$APP_DIR"
              sudo systemctl reload php8.3-fpm nginx
              sudo supervisorctl restart all
              echo "‚úÖ Rollback completed"
            else
              echo "‚ùå No backup found for rollback"
              exit 1
            fi
